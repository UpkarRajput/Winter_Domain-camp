#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <iomanip>
using namespace std;

class InventoryItem {
private:
    int itemID;
    string name;
    string category;
    int quantity;
    int reorderLevel;

public:
    InventoryItem(int id, string n, string cat, int qty, int reorder)
        : itemID(id), name(n), category(cat), quantity(qty), reorderLevel(reorder) {}

    int getItemID() const { return itemID; }
    string getName() const { return name; }
    string getCategory() const { return category; }
    int getQuantity() const { return quantity; }
    int getReorderLevel() const { return reorderLevel; }

    void updateQuantity(int qty) { quantity += qty; }

    bool needsReorder() const { return quantity < reorderLevel; }

    void display() const {
        cout << left << setw(10) << itemID << setw(20) << name << setw(15) << category
             << setw(10) << quantity << setw(15) << reorderLevel;
        if (needsReorder())
            cout << "* Needs Reorder";
        cout << endl;
    }

    string toFileFormat() const {
        return to_string(itemID) + "," + name + "," + category + "," + to_string(quantity) + "," + to_string(reorderLevel);
    }
};

class InventoryManagementSystem {
private:
    vector<InventoryItem> inventory;

    InventoryItem* findItemByID(int id) {
        for (auto& item : inventory) {
            if (item.getItemID() == id)
                return &item;
        }
        return nullptr;
    }

public:
    void addItem() {
        int id, qty, reorder;
        string name, category;

        cout << "Enter Item ID: ";
        cin >> id;
        cin.ignore();
        
        if (findItemByID(id)) {
            cout << "Item with this ID already exists!\n";
            return;
        }

        cout << "Enter Item Name: ";
        getline(cin, name);
        cout << "Enter Category: ";
        getline(cin, category);
        cout << "Enter Quantity: ";
        cin >> qty;
        cout << "Enter Reorder Level: ";
        cin >> reorder;

        inventory.emplace_back(id, name, category, qty, reorder);
        cout << "Item added successfully!\n";
    }

    void updateStock() {
        int id, qty;
        cout << "Enter Item ID to update stock: ";
        cin >> id;

        InventoryItem* item = findItemByID(id);
        if (!item) {
            cout << "Item not found!\n";
            return;
        }

        cout << "Enter quantity to add/remove (use negative value to remove): ";
        cin >> qty;
        item->updateQuantity(qty);
        cout << "Stock updated successfully!\n";
    }

    void viewInventory() const {
        cout << left << setw(10) << "Item ID" << setw(20) << "Name" << setw(15) << "Category"
             << setw(10) << "Quantity" << setw(15) << "Reorder Level" << endl;
        cout << string(70, '-') << endl;

        for (const auto& item : inventory) {
            item.display();
        }
    }
    void searchItem() const {
        string query;
        cout << "Enter Item Name or Category to search: ";
        cin.ignore();
        getline(cin, query);

        bool found = false;
        for (const auto& item : inventory) {
            if (item.getName() == query || item.getCategory() == query) {
                if (!found) {
                    cout << left << setw(10) << "Item ID" << setw(20) << "Name" << setw(15) << "Category"
                         << setw(10) << "Quantity" << setw(15) << "Reorder Level" << endl;
                    cout << string(70, '-') << endl;
                }
                item.display();
                found = true;
            }
        }
        if (!found) {
            cout << "No items found matching the query!\n";
        }
    }

    void exportData() const {
        ofstream outFile("inventory_report.csv");
        if (!outFile) {
            cout << "Error creating file!\n";
            return;
        }

        outFile << "Item ID,Name,Category,Quantity,Reorder Level\n";
        for (const auto& item : inventory) {
            outFile << item.toFileFormat() << endl;
        }

        outFile.close();
        cout << "Inventory data exported successfully to inventory_report.csv!\n";
    }
};

void displayMenu() {
    cout << "\nWarehouse Inventory Management System\n";
    cout << "-------------------------------------\n";
    cout << "1. Add New Item\n";
    cout << "2. Update Stock\n";
    cout << "3. View Inventory\n";
    cout << "4. Search Item\n";
    cout << "5. Export Data\n";
    cout << "6. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    InventoryManagementSystem ims;
    int choice;

    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                ims.addItem();
                break;
            case 2:
                ims.updateStock();
                break;
            case 3:
                ims.viewInventory();
                break;
            case 4:
                ims.searchItem();
                break;
            case 5:
                ims.exportData();
                break;
            case 6:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
